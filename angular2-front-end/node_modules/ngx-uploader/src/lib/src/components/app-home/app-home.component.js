var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Component, EventEmitter } from '@angular/core';
import { humanizeBytes } from '../../../';
var AppHomeComponent = (function () {
    function AppHomeComponent() {
        this.formData = {
            concurrency: 0,
            autoUpload: false,
            verbose: true
        };
        this.files = [];
        this.uploadInput = new EventEmitter();
        this.humanizeBytes = humanizeBytes;
    }
    AppHomeComponent.prototype.onUploadOutput = function (output) {
        if (output.type === 'allAddedToQueue') {
            if (this.formData.autoUpload) {
                var event_1 = {
                    type: 'uploadAll',
                    url: '/upload',
                    method: 'POST',
                    data: { foo: 'bar' },
                    concurrency: this.formData.concurrency
                };
                this.uploadInput.emit(event_1);
            }
        }
        else if (output.type === 'addedToQueue') {
            this.files.push(output.file);
        }
        else if (output.type === 'uploading') {
            var index = this.files.findIndex(function (file) { return file.id === output.file.id; });
            this.files[index] = output.file;
        }
        else if (output.type === 'removed') {
            this.files = this.files.filter(function (file) { return file !== output.file; });
        }
        else if (output.type === 'dragOver') {
            this.dragOver = true;
        }
        else if (output.type === 'dragOut') {
            this.dragOver = false;
        }
        else if (output.type === 'drop') {
            this.dragOver = false;
        }
    };
    AppHomeComponent.prototype.startUpload = function () {
        var event = {
            type: 'uploadAll',
            url: 'http://ngx-uploader.com/upload',
            method: 'POST',
            data: { foo: 'bar' },
            concurrency: this.formData.concurrency
        };
        this.uploadInput.emit(event);
    };
    AppHomeComponent.prototype.cancelUpload = function (id) {
        this.uploadInput.emit({ type: 'cancel', id: id });
    };
    AppHomeComponent.prototype.removeFile = function (id) {
        this.uploadInput.emit({ type: 'remove', id: id });
    };
    AppHomeComponent.prototype.removeAllFiles = function () {
        this.uploadInput.emit({ type: 'removeAll' });
    };
    return AppHomeComponent;
}());
AppHomeComponent = __decorate([
    Component({
        selector: 'app-home',
        templateUrl: 'app-home.component.html'
    }),
    __metadata("design:paramtypes", [])
], AppHomeComponent);
export { AppHomeComponent };
