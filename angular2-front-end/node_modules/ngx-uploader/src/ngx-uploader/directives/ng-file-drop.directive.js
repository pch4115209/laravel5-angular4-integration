"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var ngx_uploader_class_1 = require("../classes/ngx-uploader.class");
var NgFileDropDirective = (function () {
    function NgFileDropDirective(elementRef) {
        this.elementRef = elementRef;
        this.stopEvent = function (e) {
            e.stopPropagation();
            e.preventDefault();
        };
        this.upload = new ngx_uploader_class_1.NgUploaderService();
        this.uploadOutput = new core_1.EventEmitter();
    }
    NgFileDropDirective.prototype.ngOnInit = function () {
        var _this = this;
        this.el = this.elementRef.nativeElement;
        this.upload.serviceEvents.subscribe(function (event) {
            _this.uploadOutput.emit(event);
        });
        if (this.uploadInput instanceof core_1.EventEmitter) {
            this.upload.initInputEvents(this.uploadInput);
        }
        this.el.addEventListener('drop', this.stopEvent, false);
        this.el.addEventListener('dragenter', this.stopEvent, false);
        this.el.addEventListener('dragover', this.stopEvent, false);
    };
    NgFileDropDirective.prototype.ngOnDestroy = function () {
        if (this.uploadInput) {
            this.uploadInput.unsubscribe();
        }
    };
    NgFileDropDirective.prototype.onDrop = function (e) {
        e.stopPropagation();
        e.preventDefault();
        var event = { type: 'drop' };
        this.uploadOutput.emit(event);
        this.upload.handleFiles(e.dataTransfer.files);
    };
    NgFileDropDirective.prototype.onDragOver = function (e) {
        if (!e) {
            return;
        }
        var event = { type: 'dragOver' };
        this.uploadOutput.emit(event);
    };
    NgFileDropDirective.prototype.onDragLeave = function (e) {
        if (!e) {
            return;
        }
        var event = { type: 'dragOut' };
        this.uploadOutput.emit(event);
    };
    return NgFileDropDirective;
}());
__decorate([
    core_1.Input()
], NgFileDropDirective.prototype, "uploadInput", void 0);
__decorate([
    core_1.Output()
], NgFileDropDirective.prototype, "uploadOutput", void 0);
__decorate([
    core_1.HostListener('drop', ['$event'])
], NgFileDropDirective.prototype, "onDrop", null);
__decorate([
    core_1.HostListener('dragover', ['$event'])
], NgFileDropDirective.prototype, "onDragOver", null);
__decorate([
    core_1.HostListener('dragleave', ['$event'])
], NgFileDropDirective.prototype, "onDragLeave", null);
NgFileDropDirective = __decorate([
    core_1.Directive({
        selector: '[ngFileDrop]'
    })
], NgFileDropDirective);
exports.NgFileDropDirective = NgFileDropDirective;
